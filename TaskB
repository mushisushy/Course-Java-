import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Vector;

class Node {
    int value;
    Node left, right;
    public Node(int val) {
        value = val;
        left = right = null;
    }
}

class NaiveBinaryST {

    Node insertToTree(Node root, int child) {
        if (root == null) {
            return new Node(child);
        }

        if (child < root.value) {
            root.left = insertToTree(root.left, child);
        } else if (child > root.value) {
            root.right = insertToTree(root.right, child);
        }
        return root;
    }

    void findLeafNodes(Node root, Vector<Integer> leaves) {
        if (root == null) return;

        if (root.left == null && root.right == null) {
            leaves.add(root.value);
        }

        findLeafNodes(root.left, leaves);
        findLeafNodes(root.right, leaves);
    }

    void sortAsc(Vector<Integer> list) {
        for (int i = 1; i < list.size(); i++) {
            int key = list.get(i);
            int j = i - 1;

            while (j >= 0 && list.get(j) > key) {
                list.set(j + 1, list.get(j));
                j = j - 1;
            }
            list.set(j + 1, key);
        }
    }
}

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        NaiveBinaryST bst1 = new NaiveBinaryST();
        Node root = null;

        String input = reader.readLine();
        String[] numbers = input.split(" ");

        for (String numStr : numbers) {
            int num = Integer.parseInt(numStr);
            if (num == 0) break;
            root = bst1.insertToTree(root, num);
        }

        Vector<Integer> leaves = new Vector<>();
        bst1.findLeafNodes(root, leaves);

        bst1.sortAsc(leaves);

        for (int i = 0; i < leaves.size(); i++) {
            System.out.print(leaves.get(i) + " ");
        }
    }
}
