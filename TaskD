import java.util.Vector;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanInput = new Scanner(System.in);

        int len = scanInput.nextInt();
        int[] numArray = new int[len];
        for (int i = 0; i < len; i++) {
            numArray[i] = scanInput.nextInt();
        }

        Vector<Integer> NonIncrSubSeq = new Vector<>();
        int[] predTracker = new int[len];
        int maxLenSS = 0;
        int lastIdx = -1;

        for (int i = 0; i < len; i++) {
            int posInSubSeq = posBinarySearch(NonIncrSubSeq, numArray, numArray[i]);

            if (posInSubSeq < NonIncrSubSeq.size()) {
                NonIncrSubSeq.set(posInSubSeq, i);
            } else {
                NonIncrSubSeq.add(i);
            }

            if (posInSubSeq == 0) {
                predTracker[i] = -1;
            } else {
                predTracker[i] = NonIncrSubSeq.get(posInSubSeq - 1);
            }

            if (posInSubSeq + 1 > maxLenSS) {
                maxLenSS = posInSubSeq + 1;
                lastIdx = i;
            }
        }

        int[] finalSS = new int[maxLenSS];
        int currIdx = lastIdx;
        for (int i = maxLenSS - 1; i >= 0; i--) {
            finalSS[i] = currIdx + 1;
            currIdx = predTracker[currIdx];
        }

        System.out.println(maxLenSS);
        for (int i = 0; i < maxLenSS; i++) {
            System.out.print(finalSS[i] + " ");
        }
    }

    private static int posBinarySearch(Vector<Integer> NonIncrSubSeq, int[] numArray, int currNum) {
        int low = 0;
        int high = NonIncrSubSeq.size() - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (numArray[NonIncrSubSeq.get(mid)] >= currNum) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}
